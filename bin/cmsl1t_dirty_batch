#! /usr/bin/env python

from __future__ import print_function
import click
import click_log
import yaml
import os
from cmsl1t.config import ConfigParser, get_unique_out_dir
import htcondor
import sys
import math
from textwrap import dedent
import logging
logger = logging.getLogger(__name__)


class cmsl1t_batch_job(object):
    def __init__(self, batch_directory):
        setup_script = os.path.join(os.environ["PROJECT_ROOT"], "bin", "env.sh")

        run_script_contents = dedent("""\
        #! /bin/bash
        source {setup_script}
        cmsl1t $@
        """).format(setup_script=setup_script)

        self.run_script = os.path.realpath(os.path.join(batch_directory, "run_script.sh"))
        with open(self.run_script, "w") as run_script:
            run_script.write(run_script_contents)

    def submit(self, config_files):
        logger.info("Will submit", len(config_files), "jobs")
        schedd = htcondor.Schedd()
        results = []
        for cfg in config_files:
            with schedd.transaction() as txn:
                cfg = os.path.realpath(cfg)
                job_cfg = dict(executable=self.run_script,
                               arguments="-c {}".format(cfg))
                sub = htcondor.Submit(job_cfg)
                out = sub.queue(txn)
                results.append(out)
        return results


@click.command()
@click.option('-c', '--config_file', help='YAML style config file', type=click.File(), required=True)
@click_log.simple_verbosity_option()
@click_log.init(__name__)
def run(config_file):
    # Read the config file
    config = ConfigParser()
    config.read(config_file)

    # Get the list of input files (we're going to run one of these per job)
    input_ntuples = config.get('input', 'files')

    # Get the output directory
    output_directory = config.get('output', 'folder')
    batch_dir = os.path.join(output_directory, "batch")
    batch_dir = get_unique_out_dir(batch_dir)
    batch_config_dir = os.path.join(batch_dir, "_configs")
    logger.info("Batch config files will be placed under:", batch_config_dir)
    os.makedirs(batch_config_dir)

    # Sort out a name for the batch config files
    n_jobs = len(input_ntuples)
    n_jobs_pad_width = int(math.log10(n_jobs)) + 1
    batch_filename = os.path.basename(config_file.name)
    batch_filename = list(os.path.splitext(batch_filename))
    batch_filename.insert(1, "_{index}")
    batch_filename = "".join(batch_filename)
    batch_filename = os.path.join(batch_config_dir, batch_filename)

    out_dir = "job_{index}"
    out_dir = os.path.join(batch_dir, out_dir)

    padding = "{{:0{}}}".format(n_jobs_pad_width)

    # Prepare input jobs
    job_configs = []
    for i, ntuple in enumerate(input_ntuples):
        padded_index = padding.format(i)

        # Reset the input file list
        config.config['input']['files'] = [os.path.realpath(ntuple)]

        # Reset the output directory
        config.config['output']['folder'] = out_dir.format(index=padded_index)

        # Dump the config file
        batch_file = batch_filename.format(index=padded_index)
        config.dump(batch_file)

        job_configs.append(batch_file)

    # Now actually submit the jobs
    submitter = cmsl1t_batch_job(batch_dir)
    result = submitter.submit(job_configs)

    if not all(result):
        logger.error("Error: submitting jobs failed...")
        return False

    # Finally dump the commands needed to run the next steps to screen:
    next_steps = """
    Jobs should be running on htcondor now.  To monitor their progress use:

        condor_q $USER

    when all jobs are done, you can combine all results together with:

        cmsl1t -c {cfg} -r --hist-files '{out_dir}/*.root'

    ie. use the same config file given here, but reload hists from the intermediate root files.
    """

    logger.info(next_steps.format(cfg=config_file.name,
                                  out_dir=out_dir.format(index="*")))

    return True


if __name__ == '__main__':
    run()
